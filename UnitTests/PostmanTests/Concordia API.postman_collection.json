{
	"info": {
		"_postman_id": "3120a188-6009-465e-b8a4-1da2e2f2fa74",
		"name": "Concordia API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Scientists",
			"item": [
				{
					"name": "PerformanceReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response;\r",
									"const responseData = response.json();\r",
									"const expectedSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"scientistId\",\r",
									"                    \"completedTasks\",\r",
									"                    \"assignedTasks\",\r",
									"                    \"percentCompleted\"\r",
									"                ],\r",
									"                \"properties\" : {\r",
									"                    \"scientistId\" : {\r",
									"                        \"type\" : \"string\"\r",
									"                    },\r",
									"                    \"completedTasks\": {\r",
									"                        \"type\" : \"integer\"\r",
									"                    },\r",
									"                    \"assignedTasks\": {\r",
									"                        \"type\" : \"integer\"\r",
									"                    },\r",
									"                        \"percentCompleted\": {\r",
									"                        \"type\" : \"string\"\r",
									"                        },\r",
									"                }\r",
									"            }\r",
									"           \r",
									" \r",
									"            \r",
									"\r",
									"pm.test(\"Basic OK\", function(){\r",
									"    response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/Scientist/{{TestScientistID}}/PerformanceReport",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Scientist",
								"{{TestScientistID}}",
								"PerformanceReport"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response;\r",
									"const responseData = response.json();\r",
									"const expectedSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"type\": \"array\",\r",
									"            \"additionalItems\": false,\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"title\",\r",
									"                    \"description\",\r",
									"                    \"dueBy\",\r",
									"                    \"priority\",\r",
									"                    \"status\"\r",
									"                ],\r",
									"                \"properties\" : {\r",
									"                    \"id\" : {\r",
									"                        \"type\" : \"string\"\r",
									"                    },\r",
									"                    \"title\": {\r",
									"                        \"type\" : \"string\"\r",
									"                    }\r",
									"                    ,\r",
									"                    \"description\": {\r",
									"                        \"type\" : \"string\"\r",
									"                    },\r",
									"                    \"priority\": {\r",
									"                        \"type\" : \"integer\"\r",
									"                    },\r",
									"                     \"status\": {\r",
									"                        \"type\" : \"string\"\r",
									"                    },\r",
									"                }\r",
									"            }\r",
									"           \r",
									"}  \r",
									"            \r",
									"\r",
									"pm.test(\"Basic OK\", function(){\r",
									"    response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/Scientist/{{TestScientistID}}/Assignments",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Scientist",
								"{{TestScientistID}}",
								"Assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response;\r",
									"const responseData = response.json();\r",
									"const expectedSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"type\": \"array\",\r",
									"            \"additionalItems\": false,\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\"\r",
									"                ],\r",
									"                \"properties\" : {\r",
									"                    \"id\" : {\r",
									"                        \"type\" : \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\" : \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"           \r",
									"}  \r",
									"            \r",
									"\r",
									"pm.test(\"Basic OK\", function(){\r",
									"    response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/Scientist/All",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Scientist",
								"All"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cards",
			"item": [
				{
					"name": "GetLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response;\r",
									"const responseData = response.json();\r",
									"const expectedSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"type\": \"array\",\r",
									"            \"additionalItems\": false,\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\"\r",
									"                ],\r",
									"                \"properties\" : {\r",
									"                    \"id\" : {\r",
									"                        \"type\" : \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\" : \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"           \r",
									"}  \r",
									"            \r",
									"\r",
									"pm.test(\"Basic OK\", function(){\r",
									"    response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/Card/AllLists",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Card",
								"AllLists"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response;\r",
									"const responseData = response.json();\r",
									"const expectedSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"type\": \"array\",\r",
									"            \"additionalItems\": false,\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"title\",\r",
									"                    \"description\",\r",
									"                    \"dueBy\",\r",
									"                    \"priority\",\r",
									"                    \"status\"\r",
									"                ],\r",
									"                \"properties\" : {\r",
									"                    \"id\" : {\r",
									"                        \"type\" : \"string\"\r",
									"                    },\r",
									"                    \"title\": {\r",
									"                        \"type\" : \"string\"\r",
									"                    },\r",
									"                \"description\" :{\r",
									"                        \"type\": \"string\"\r",
									"                },\r",
									"                \"priority\" :{\r",
									"                        \"type\": \"integer\"\r",
									"                },\r",
									"                \"status\" :{\r",
									"                        \"type\": \"string\"\r",
									"                }\r",
									"                }\r",
									"            }\r",
									"           \r",
									"}  \r",
									"            \r",
									"\r",
									"pm.test(\"Basic OK\", function(){\r",
									"    response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/Card/All",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Card",
								"All"
							]
						}
					},
					"response": []
				},
				{
					"name": "PostComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Basic OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"cardId\": \"{{TestCardID}}\",\r\n  \"text\": \"commento di testo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/Card/Comment",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Card",
								"Comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "PostChangeList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Basic OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"{{TestListID}}\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/Card/{{TestCardID}}/ChangeList",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Card",
								"{{TestCardID}}",
								"ChangeList"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}